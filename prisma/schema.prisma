generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         BigInt   @id @unique @default(autoincrement())
    score      Float?
    country    BigInt
    uuid       String?  @unique
    events     Event[]
    solves     Solves[]
    countryRef Country  @relation(fields: [country], references: [id], map: "User_Country_fkey")
}

model Country {
    id   BigInt @id @unique @default(autoincrement())
    name String @unique(map: "Country_Name_key")
    User User[]
}

model Problem {
    id       BigInt   @id @unique @default(autoincrement())
    problem  String
    solution String
    subject  String
    level    Int      @db.SmallInt
    title    String?
    Event    Event[]
    Method   Method[]
    Solves   Solves[]
}

model Method {
    id          BigInt  @id @unique @default(autoincrement())
    problemId   BigInt
    title       String
    description String
    Event       Event[]
    problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
    Step        Step[]
}

model Step {
    id         BigInt  @id @unique @default(autoincrement())
    methodId   BigInt
    stepNumber Int
    content    String
    Event      Event[]
    method     Method  @relation(fields: [methodId], references: [id], onDelete: Cascade, map: "step_methodId_fkey")
}

model Event {
    id         BigInt   @id @unique @default(autoincrement())
    loggedAt   DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
    sessionId  BigInt
    actionName String
    payload    String
    userId     BigInt
    problemId  BigInt?
    methodId   BigInt?
    stepId     BigInt?
    method     Method?  @relation(fields: [methodId], references: [id], onDelete: Restrict, map: "Event_method_fkey")
    problem    Problem? @relation(fields: [problemId], references: [id], onDelete: Restrict)
    step       Step?    @relation(fields: [stepId], references: [id], onDelete: Restrict, map: "Event_step_fkey")
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Solves {
    id                BigInt    @id(map: "solves_pkey") @unique(map: "solves_id_key") @default(autoincrement())
    userId            BigInt
    problemId         BigInt
    attempts          Int
    startedSolvingAt  DateTime  @default(now()) @db.Timestamptz(6)
    finishedSolvingAt DateTime? @db.Timestamptz(6)
    stepsUsed         Int
    feedback          Int?
    problem           Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade, map: "solves_problemId_fkey")
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "solves_userId_fkey")
}
